Context: Capabilities
    Humbug is a multilingual GUI-based application that allows a user to interact with one or more AI backends.

    Navigation is done using a keyboard and mouse.

    Context: Version
        This is version 0.22 of the application.

    Context: General concepts
        The application is designed to allow a user to create and manage projects that interact with AI backend
        systems.  Each project is called a "mindspace", and represents the same sort of concept as a workspace in
        a developer tool.

        Mindspaces comprise contextual information about the project.  This could be documentation, source code,
        diagrams, etc.

        The user is able to interact with the mindspace via a GUI application that runs on their local computer.

        The application provides means for both the user and for AI assistants to work on the project contents.

    Context: Human language support
        To give a great user experience, the application supports many human languages.  The current operating
        language can be changed at runtime, and the current language is stored in the mindspace.  This allows
        users to work with whatever language they are most comfortable using, but will be able to leverage AI
        to translate things as necessary.

        Throughout the rest of this document, references will be made to the English language version of any
        messages or strings, but the application will support the matching versions in all other languages.

    Context: Application window
        The main window is divided into two primary regions: a mindspace tree view on the left side, and a tabbed
        interface on the right side. The two regions are separated by a resizable splitter that allows the user
        to adjust the relative widths.  At the bottom of the main window is an application status bar.

        Tabs can be arranged as either single column of tabs, or have a split view that has up to 6 columns of tabs
        side-by-side.

        Context: Tab columns
            Context: Column layout options
                The application supports both single-column and multi-column layouts.

                We support a maximum of 6 columns.

                Each column maintains its own set of tabs.

                One column is always the active column.

                The active column receives new tabs by default.

                The active column is visually distinguished from inactive columns because the active tab is
                clearly visible.

                Clicking in a column or its tabs makes it the active column.

                Keyboard focus changes also updates the active column.

                When a column becomes empty, that column becomes closed and is removed.

                If all tabs in a column are closed then the column is also closed.

                If multiple columns are open then tabs can be moved from one column to another by dragging and
                dropping them with the mouse.

            Context: Column splitting and merging
                Provided there is more than one tab open in the currently-active column, then the currently-active
                column can be split, with the current open tab moving to the new column.

                Provided there is more than one column open, then the current column can be merged with any
                adjacent column, with all tabs moving to that column and the current column being closed.

            Context: Column swapping
                Provided there is more than one column open, the the current column can be swapped with any
                adjacent column.

            Context: Column persistence
                The column layout is persisted with the mindspace.

                On restoring (reopening) a mindspace:

                - Each column's position is restored in the same order as they were when stored.
                - Within each column the active tab in the column is also restored.
                - The column that was active when stored is also made the active column when restored.

        Context: Mindspace tree view
            The mindspace tree displays the contents of the current mindspace:

            - Shows the name of the current mindspace, or "no mindspace active" if none is active
            - Shows all files and folders in the mindspace directory
            - Excludes the ".humbug" directory and other hidden files/folders
            - Directories are shown before files in the tree
            - Files and directories are sorted alphabetically within their sections
            - The tree supports keyboard navigation using arrow keys
            - Clicking on a file or folder opens it in a new wiki tab, unless the file
              is a conversation file ("*.conv") in which case it is opened as a new conversation.  A tab
              opened this way is marked "ephemeral" and has a different coloured label, plus text in
              italics.  An ephemeral tab will be overwritten by the next new tab to be opened.
            - Dragging a file or folder into the tab column view opens it in a new wiki tab, unless the file is
              a conversation file ("*.conv") in which case it is opened as a new conversation.
            - Double-clicking on a file opens it in a new editor tab.
            - If the file is already open, its tab becomes active instead
            - Directory nodes can be expanded/collapsed using arrow keys or mouse
            - Initial view is set to 30% of the window width, but can be resized
            - Styling matches the current application theme (light/dark mode)
            - The tree view updates automatically when files are added or removed

            Context: File/directory mouse-over
                If the user mouses over a file or directory item then this will pop open a tooltip that
                will display the full path name of the item moused-over.

            Context: File pop-up menu
                If the user clicks the right mouse button while a file is highlighted then they will be
                given a pop-up menu.

                Context: Edit
                    If the user selects "Edit" then the system will open the file in an editor tab.

                Context: Duplicate
                    If the user selects "Duplicate" then the system will create a duplicate of the current file
                    using the suffix "- copy" and an option numeric suffix if a copy already exists.

                    On creating the duplicate file, the file label will be made editable.

                    On creating the name edit control, any file extension should not be selected, while the name
                    of the file should be.  This means the user can overtype the name without losign the file type.

                Context: Rename
                    If the user selects "Rename" then the system will create an edit control in-situ in the tree
                    that allows them to rename the file to any name that is not already used.

                    On creating the name edit control, any file extension should not be selected, while the name
                    of the file should be.  This means the user can overtype the name without losign the file type.

                Context: Delete
                    If the user selects "Delete" then the system will confirm they want to delete the file
                    via a message box.  The message box will warn that deleting the file will also close
                    any tabs based on the file and will discard any unsaved changes.  If the user agrees
                    then the tabs will be closed and the file deleted.  If the user does not
                    agree then the action will be cancelled.

            Context: Directory pop-up menu
                If the user clicks the right mouse button while a directory/folder is highlighted then they
                will be given a pop-up menu.

                Context: New folder
                    Clicking "New Folder" will create a temporary new folder called "New Folder" and will
                    open an edit control to allow this name to be changed to any name that is not already used
                    within the directory.

                Context: New file
                    Clicking "New File" will create a temporary new folder called "New File.txt" and will
                    open an edit control to allow this name to be changed to any name that is not already used
                    within the directory.

                    On the user hitting return on a valid name the new file will automatically be opened in an
                    editor tab.

                Context: Rename
                    If the user selects "Rename" then the system will create an edit control in-situ in the tree
                    that allows them to rename the folder to any name that is not already used.

                Context: Delete
                    If the user selects "Delete" then the system will confirm they want to delete the folder
                    via a message box.  The message box will warn that deleting the folder will also close
                    any tabs based on the folder and will discard any unsaved changes.  If the user agrees
                    then the tabs will be closed and the folder deleted.  If the user does not
                    agree then the action will be cancelled.

                    Only empty folders may be deleted.

            Content: Name validation
                Only valid file/folder names can be entered by the user.  If there is a problem with the current
                name then a message will appear below the edit control to indicate what the problem is.  If the
                edit control is at the bottom of the mindspace tree then the message will appear above the edit
                control.

            Context: File tree styling
                The file tree view must maintain consistent styling:

                - Background color matches the application theme
                - Tree items use primary text color
                - Selected items use tab active background color
                - Hover state uses tab hover background color
                - Tree lines and expander icons match theme colors
                - Splitter handle uses 1px width with theme background
                - All colors follow the dark/light mode selection
                - Font sizes scale with application zoom level
                - Padding and spacing match the theme metrics

            Context: Automatic view changes
                When the user opens a file or directory, either via a menu or via the system shell, the matching
                file or directory will be expanded in the tree view.  The newly opened element will also be
                selected.

                When the user changes the current active tab by selecting a new one, if the tab is associated with
                an element in the tree view then that element will be selected too.

            Context: Drag and drop movement of files/folders
                The user can drag a file or folder in the mindspace tree view to a new location in the tree.  The
                user may only drop the file or folder in another folder.

                Before moving the file/folder the user will be given a dialog box and asked to confirm the details
                of the move are correct, and to give them chance to cancel the operation.

                The "conversations", "metaphor", and ".humbug" directories cannot be moved this way.

                The drag and drop will have a visual change in the background colour and draw a faint border around
                any potential drop target as the user mouses over it.

                If the user mouses over an unexpanded folder while dragging, the folder will auto-expand after 0.5
                seconds.  If they user then moves on to a new folder the auto-expanded folder will auto-close.

        Context: Tab view
            The tabbed interface has tabs that correspond to either conversations being
            had with one or more AI backends, or files being edited.

            Selecting a tab brings that conversation to the front of the tab group.

            When there are no tabs open, the application displays a welcome message in the main window area.

            The welcome message appears in a styled box with dialog-style spacing that shows:

            - The application name "Humbug" in a font twice the size of the default application font
            - The version number underneath in the default font size

            Both pieces of text are centered within the styled box.

            The welcome message is automatically hidden when tabs are created and reappears when all tabs are closed.

            Context: Tab types
                There are 5 distinct types of tabs:

                - Conversation tabs: For AI interactions
                - Editor tabs: For file editing
                - Shell tab: For interacting with Humbug system command line tools
                - Terminal tabs: For interacting with local command line tools
                - Wiki tabs: For viewing information within the mindspace

                Each type has its own distinct visual appearance and behavior.

                Active tabs are a different colour to inactive tabs, and the active tab has a 2px border at the top to
                highlight that it is the active tab.

                Include: metaphor/humbug/tab-conversation.m6r
                Include: metaphor/humbug/tab-editor.m6r
                Include: metaphor/humbug/tab-shell.m6r
                Include: metaphor/humbug/tab-terminal.m6r
                Include: metaphor/humbug/tab-wiki.m6r

            Context: Tab labels
                Each tab has a tab label.  This comprises an icon indicating the tab type, a text label indicating the tab
                contents, and a close button.

                Clicking the close button (typically rendered as an "x" icon) will close the tab in the same way as
                clicking the "Close Tab" menu item.

                The close button will be:

                - Always visible but not highlighted on the currently selected tab.
                - Hidden by default on non-selected tabs, appearing only when the tab is hovered over.
                - Use a transparent background when not hovered
                - Highlighted in red when the mouse hovers over the close button itself.

                If the user mouses over any tab label except the current active one in the current active column,
                the tab label will be highlighted with a hover colour to indicate that clicking will move the
                active tab to the one being moused-over.

            Context: Tab ordering
                The order of use of each tab in a column will be tracked in an MRU list per column.  When the current
                tab is deleted, the most recently used tab in the column will be activated in its place.

            Context: Syntax highlighting
                Code blocks and inline code will be syntax highlighted based on the programming language
                or data format.

                The syntax highlighting is updated in real-time as text is entered or changed.

                Context: Language and data format detection
                    When a code block starts with a language identifier (e.g., ```python), the
                    appropriate syntax highlighting rules for that language are applied.
                    If no language is specified, the code is treated as plain text with no highlighting.

                Context: Supported languages and data formats
                    Syntax highlighting is supported for:

                    - C
                    - C++
                    - C#
                    - CSS
                    - Go
                    - HTML
                    - Java
                    - JavaScript
                    - JSON
                    - Kotlin
                    - Markdown
                    - Metaphor
                    - Move (Sui Move)
                    - Python
                    - Rust
                    - Scheme (R5RS)
                    - Swift
                    - TypeScript

        Context: Dialog styling
            Modal dialogs must maintain visual consistency with the application theme:

            Context: Color scheme
                Dialogs must use the same color scheme as the main application:

                - Dialog background uses BACKGROUND_DIALOG color
                - Dialog icon color matches TEXT_PRIMARY color
                - Dialog text background matches dialog background
                - Text uses TEXT_PRIMARY color
                - Buttons use BUTTON_BACKGROUND background color, with BUTTON_BACKGROUND_HOVER for hover state,
                  BUTTON_BACKGROUND_DISABLED for disabled buttons, and BUTTON_BACKGROUND_PRESSED when they are pressed.
                - All text and interactive elements must respect current theme colors

            Context: Layout
                Dialog boxes must maintain consistent layout:

                - Minimum width of 400px
                - Message text uses minimum height of 40px
                - Buttons centered with 8px margin above
                - All buttons same size with 80px minimum width
                - Button padding of 6px
                - 4px margin between buttons

    Context: Mindspace structure
        A mindspace represents a project-specific environment containing its own settings and state.

        Every mindspace is identified by a ".humbug" directory within the project directory.

        The mindspace ".humbug" directory contains:

        - settings.json: Mindspace-specific configuration
        - session.json: State of active elements
        - directories.json: Previously used directory paths

        Context: Mindspace settings
            As an engineer maintaining the application, I want to ensure settings are documented so I can understand
            all configuration options.

            Context: Mindspace Settings Dialog
                Context: Conversation settings
                    Context: AI Model
                        The AI model is selected via a dropdown menu.

                        Available models should be configurable at application startup.

                        If a model's provider is not available (no API key), that model should be disabled in the
                        conversation settings.

                        Changing the model only affects new conversations, not any existing ones.

                    Context: Temperature
                        The temperature is set via a numeric input field that:

                        - Accepts values between 0.0 and 1.0
                        - Shows one decimal place
                        - Has spinner arrows for adjustment
                        - Default value is 0.7

                        Changing the temperature only affects new conversations, not any existing ones.

                Context: Editor settings
                    Context: Tab character settings
                        The visual tabs (e.g. editor and conversation) supports configurable tab character behavior.

                        Context: Soft tabs
                            The useSoftTabs setting controls whether pressing the tab key inserts literal
                            tab characters or equivalent spaces.

                        Context: Tab size
                            The tabSize setting controls how many spaces wide a tab or soft tab will be.

                    Context: Auto backup settings
                        The editor supports automatic backup of unsaved changes.

                        Context: Auto backup
                            The "Auto Backup" setting controls whether automatic backup is enabled.

                            When enabled, unsaved changes are automatically backed up at regular intervals.
                            By default, this setting is disabled.

                        Context: Backup interval
                            The "Backup Interval" setting controls how frequently backups occur.

                            The interval can be set between 60 seconds (1 minute) and 3600 seconds (1 hour).

                            Default interval is 300 seconds (5 minutes).

                        Context: Backup location
                            For untitled files, backups are stored in the mindspace ".humbug/backups" directory with timestamp.

                            For saved files, backups are stored alongside the original with ".backup" extension.

                        Context: Backup behavior
                            Backups only occur when:

                            - Auto backup is enabled in mindspace settings
                            - The file has unsaved changes
                            - The specified backup interval has elapsed since last backup

                            Backups do not replace the original file and are preserved until the file is saved.

        Context: Mindspace settings file
            The settings.json file contains mindspace-specific configuration.  The application validates this file
            on mindspace load.

            If validation fails:

            - Show error dialog with specific issues
            - Use defaults: soft tabs (true) and 4 spaces
            - Continue loading mindspace

        Context: Session file
            The session.json file tracks mindspace state for restoration.

            The file is:

            - Read on mindspace load to restore state
            - Updated when mindspace closes
            - Updated when application exits

            During restoration:

            - Attempt to restore each element
            - Skip elements that cannot be restored
            - Continue with remaining elements
            - No error shown for skipped elements

        Context: Directories file
            The directories.json file tracks the previously used directories for files and
            conversations.  This ensures the user gets the best experience when they want to
            interact with multiple files in the same place.

    Context: User settings
        Humbug supports user settings.  These are the settings for the user as opposed to any specific mindspace.

        User level settings are store the a ".humbug" directory in the user's home directory.

        Some settings can also be set by environment variables that will be used if the matching entry
        in the user settings file is empty.

        Context: User settings configuration
            The application supports loading settings from a configuration file, "user-settings.json" that is
            stored in the ".humbug" directory in the user's home directory.

            The file is:

            - Created automatically if it doesn't exist
            - Read during application startup

            Context: File permissions
                For security:

                - The .humbug directory is created with mode 0o700 (user access only)
                - The user-settings.json file is created with mode 0o600 (user read/write only)

        Context: User Settings Dialog
            The user settings dialog allows the user to specify user-specifc settings.

            Context: General settings
                Context: Display settings
                    Context: Language
                        The language to be used by messages in the application can be selected from a drop-down list.

                    Context: Font Size
                        The fontSize setting controls the base font size used in editors and related text areas.
                        When not specified, the system default font size will be used.

                        The font size must be between 8.0 and 24.0 points, and supports one decimal place of precision.

                    Context: Display Theme
                        The theme setting controls the default display theme that will be used by the application.
                        This can be overriden via the "Display Theme" menu item, but changes there are not persisted.

                        Unless set otherwise, the display theme will be dark mode.

            Context: AI backend configuration
                This section comprises a series of sub-sections, one per AI backend.

                Context: Enable backend
                    A checkbox enables or disables support for the backend AI model.

                Context: API key
                    The dialog supports editing the API key used for the backend AI model.

                Context: API URL
                    The dialog supports an optional override URL that the user may specify for the backend AI model.
                    If this is left blank then the default URL will be used (and this is shown as ghost text in the
                    edit control).

    Context: Mindspace operations
        Context: File tree interaction
            When a mindspace is opened:

            - The file tree root is set to the mindspace directory
            - The tree expands to show first level of contents
            - Previous expansion state is not preserved

            When a mindspace is closed:

            - The file tree is cleared

            The file tree supports:

            - Display filtering to hide .humbug and hidden files
            - Automatic refresh when files change on disk
            - Files opened through the tree are tracked in mindspace state
            - Path handling for both absolute and mindspace-relative paths

        Context: Creating mindspaces
            When creating a new mindspace:

            - Show directory selection dialog

            When the user selects a directory, validate there is no existing ".humbug" directory within
            it.  If there is not then present the user with a new dialog:

            The dialog has:

            - 'Mindspace path', followed by the path the user selected.
            - 'Create "conversations" Folder', followed by a checkbox.
            - 'Create "metaphor" Folder", "followed by a checkbox.
            - 'Create "src" Folder", followed by a checkbox.

            The conversations folder checkbox is checked and disabled so it cannot be unchecked.

            The metaphor folder checkbox is checked and enabled so it can be unchecked.

            The source folder checkbox is unchecked and enabled so it can be checked.

            The dialog has two buttons, "OK" and "Cancel".

            If the user hits "OK" then:

            - Create ".humbug" directory
            - Create the checked directories from the dialog.
            - Create default settings.json
            - Create empty session.json
            - Show error if creation fails

        Context: Opening mindspaces
            When opening a mindspace:

            - Show directory selection dialog
            - Filter for directories with ".humbug" subdirectory
            - Close current mindspace if one exists
            - Load selected mindspace
            - Restore mindspace state
            - Update home directory tracking

        Context: Closing mindspaces
            When closing a mindspace:

            - Save current state to session.json
            - Close all mindspace elements
            - Clear mindspace state
            - Update home directory tracking

    Context: State handling
        Context: Mindspace management
            The application requires an active mindspace for most operations:

            - Conversations are stored within the mindspace
            - Editor files are opened relative to mindspace
            - Settings are loaded from mindspace
            - Application state persists in mindspace

            Without an active mindspace:

            - New conversation operations disabled
            - File operations disabled
            - Only mindspace creation/open enabled
            - Welcome message displays mindspace instructions

            On startup:

            1. Check home directory for last mindspace
            2. If found, attempt to restore.  If any previous tabs cannot be restored then ignore them.
            3. If restore fails, start without mindspace
            4. Show welcome with mindspace options

            On mindspace change:

            1. Save current mindspace state
            2. Close all active elements
            3. Load new mindspace settings
            4. Restore mindspace elements
            5. Update home directory tracking

        Context: File tree state
            The file tree maintains a visual state that includes:

            - Current mindspace root directory
            - Expanded/collapsed state of directories
            - Selected item (if any)
            - Column widths and sorting order

            This state is not persisted between sessions.

            Files opened through the tree are tracked in:

            - The mindspace sessions file for persistence
            - Active tab management for the current session

    Context: Menus
        The application will have a series of top-level Menus.

        Where any action cannot be performed at the current time it will be greyed out.

        Context: Humbug
            The "Humbug" menu is the main application menu.  When clicked it contains the following:

            Context: About Humbug
                The "About Humbug" menu item will deliver a modal pop-up dialog box that gives details of the
                application and version information.

            Context: Separator
                There will be a horizontal Separator

            Context: User Settings
                The "User Settings" menu item will support setting the user's settings.

                This will be matched with a standard keyboard shortcut (e.g. "Ctrl+," for Windows).

            Context: Separator
                There will be a horizontal Separator

            Context: Quit Humbug
                The "Quit Humbug" menu item will allow the user to exit the application.

                This will be matched with a keyboard shortcut (e.g. "Ctrl+Q" for Windows).

        Context: File
            The "File" menu handles new files and tabs.  When clicked it contains the following:

            Context: New Mindspace
                The "New Mindspace" menu item creates a new mindspace:

                - Shows directory selection dialog
                - Creates ".humbug" directory and files

                We cannot create a ".humbug" directory where one already exists.

                This will be matched with keyboard shortcut "Ctrl+Alt+N"

            Context: New Conversation
                The "New Conversation" menu item will create a new conversation tab.

                On opening a new conversation the default conversation settings come from the currently active
                mindspace settings.

                This will be matched with a keyboard shortcut (e.g. "Ctrl+Shift+N" for Windows).

                This option is only valid if a mindspace is open.

            Context: New Metaphor Conversation
                The "New Metaphor Conversation" menu item will create new conversation tab based on a
                Metaphor file.

                When invoked the user will be prompted with a file selection dialog allowing them to
                select a "*.m6r" file to use to start the conversation.  Once a file is selected then
                it will be compiled using the Metaphor compiler.  If compilation fails then a message
                box will indicate the problem/problems to the user.

                On successful compilation of the Metaphor file a new conversation will be opened, and
                the compiled prompt will be inserted into the input control, with the cursor placed at
                the end of the input.

                On opening a new conversation the default conversation settings come from the currently active
                mindspace settings.

                This will be matched with a keyboard shortcut (e.g. "Ctrl+Shift+M" for Windows).

                This option is only valid if a worksapce is open.

            Context: New File
                The "New File" menu item will create a new empty editor tab.

                This will be matched with a keyboard shortcut "Ctrl+N".

                This option is only valid if a mindspace is open.

            Context: New Terminal
                The "New Terminal" menu item will create a new terminal tab.

                This will be matched with a keyboard shortcut "Ctrl+Alt+T".

                This option is only valid if a mindspace is open.

            Context: Separator
                There will be a horizontal Separator

            Context: Open Mindspace
                The "Open Mindspace" menu item opens an existing mindspace:

                - Shows directory selection dialog
                - Filters for ".humbug" directories
                - Closes current mindspace
                - Opens selected mindspace

                This will be matched with a keyboard shortcut (e.g. "Ctrl+Alt+O" for Windows).

            Context: Open Wiki
                The "Open Wiki" menu item will open the mindspace home wiki page.

                This will be matched with a keyboard shortcut (e.g. "Ctrl+Shift+W" for Windows).

                This option is only valid if a mindspace is open.

            Context: Open Conversation
                The "Open Conversation..." menu item will show a file selection dialog allowing the user to open
                an existing conversation transcript and continue the conversation in the same file.

                When opened, the conversation history will be restored including:

                - All previous messages (user and AI)
                - System messages and error states
                - Model selection and temperature settings

                If the conversation is already open then that tab should move to being the current active tab.

                This will be matched with a keyboard shortcut "Ctrl+Shift+O".

                This option is only valid if a mindspace is open.

            Context: Open File
                The "Open File..." menu item will show a file selection dialog allowing the user to open
                an existing file in a new editor tab.

                This will be matched with a keyboard shortcut (e.g. "Ctrl+O" for Windows).

                This option is only valid if a mindspace is open.

            Context: Separator
                There will be a horizontal Separator

            Context: Fork Conversation
                The "Fork Conversation" menu item will create a new conversation tab containing the history of the
                currently selected conversation tab.

                This will create a new transcript file based on the current date/time, but will retain all previous
                message dates and times.

                This will create a new transcript file based on the original, but using the suffix "- fork" and an
                option numeric suffix if a fork already exists.

                This will be matched with a keyboard shortcut "Ctrl+Shift+F".

            Context: Separator
                There will be a horizontal Separator

            Context: Save
                The "Save" menu item will save the current file if it is an editor tab.

                If this is a new untitled file, this will behave like "Save As...".

                This will be matched with a keyboard shortcut (e.g. "Ctrl+S" for Windows).

            Context: Save As
                The "Save As..." menu item will show a file save dialog allowing the user to save the
                current file under a new name.

                This will be matched with a keyboard shortcut (e.g. "Ctrl+Shift+S" for Windows).

            Context: Separator
                There will be a horizontal Separator

            Context: Close Mindspace
                The "Close Mindspace" menu item closes current mindspace:

                - Saves state to session.json
                - Closes all mindspace elements

                This will be matched with a keyboard shortcut (e.g. "Ctrl+Alt+W" for Windows).

                This option is only valid if a mindspace is open.

            Context: Close Tab
                The "Close Tab" menu item with close the current tab, if a tab is active.

                This will be matched with a keyboard shortcut (e.g. "Ctrl+W" for Windows).

        Context: Edit
            The "Edit" menu handles edit capabilities.  When clicked it contains the following:

            Context: Submit Message
                The "Submit Message" menu item will submit the current user input message to the AI, where there is
                an input message to be submitted.

                This will be matched with a keyboard shortcut, "Ctrl+J".

            Context: Separator
                There will be a horizontal Separator

            Context: Undo
                The "Undo" menu item will all the last user input action that has not yet been committed (e.g.
                sent to the AI) to be undone.

                This will be matched with a standard keyboard shortcut (e.g. "Ctrl+Z" for Windows).

            Context: Redo
                The "Redo" menu item will restore previos undo operations, where the last user input action has
                not yet been committed (e.g. sent to the AI) to be undone.

                This will be matched with a standard keyboard shortcut (e.g. "Ctrl+Shift+Z" for Windows).

            Context: Separator
                There will be a horizontal Separator

            Context: Cut
                The "Cut" menu item will support the cutting of input text from a highlighted area where such
                text can be removed.

                This will be matched with a standard keyboard shortcut (e.g. "Ctrl+X" for Windows).

            Context: Copy
                The "Copy" menu item will support the copying of text from a highlighted area.

                This will be matched with a standard keyboard shortcut (e.g. "Ctrl+C" for Windows).

            Context: Paste
                The "Paste" menu item will support the pasting of text at the current input cursor, where
                new text can be added.

                This will be matched with a standard keyboard shortcut (e.g. "Ctrl+V" for Windows).

                Context: Paste behavior
                    When text is pasted into the input area via any method (menu, keyboard shortcuts, or right-click),
                    only the plain text content is transferred.  All formatting from the source text (including fonts,
                    colours, and text styling) is removed, ensuring the pasted content matches the default input area
                    styling.

                    After the paste operation completes, the cursor should be at the end of the pasted block.

            Context: Separator
                There will be a horizontal Separator

            Context: Find
                The "Find" menu item will allow the user to find text within the current tab (if one exists).

                When find is invoked a new control opens above the content of the tab with an input area, a status
                that indicates the number of matches for the current search, and 3 buttons.  The buttons are
                "previous" (uses a < icon for left-to-right languages, > for right-to-left languages), "next"
                (uses a > icon for left-to-right languages, < for right-to-left languages), and "close" (uses
                an x icon).

                If the user has highlighted text on a single line then find will use that text as the initial search
                string.

                This will be matched with a standard keyboard shortcut (e.g. "Ctrl+F" for Windows).

            Context: Separator
                There will be a horizontal Separator

            Context: Mindspace Settings
                The "Mindspace Settings" menu item will support setting the current mindspace's settings.

                This will be matched with a standard keyboard shortcut (e.g. "Ctrl+Alt+," for Windows).

            Context: Conversation Settings
                The "Conversation Settings" menu item will support setting the conversation settings of
                the currently focused conversation tab (if there is one).

                This will be matched with a standard keyboard shortcut (e.g. "Ctrl+Shift+," for Windows).

        Context: View
            The "View" menu handles view settings.  When clicked it contains the following:

            Context: Display Theme
                The "Display Theme" menu item will have a pop-out menu that allows the user to specify
                the current display theme.

                This will allow the user to override the Display Theme setting in the user settings.

            Context: Separator
                There will be a horizontal Separator

            Context: Zoom In
                The "Zoom In" menu item will support zooming in and making the contents of the application
                larger.  All visual elements must increase in size by a factor of 1.189027, up to a maximum
                of 2.0

                This will be matched with a keyboard shortcut (e.g. "Ctrl+=" for Windows).

            Context: Zoom Out
                The "Zoom Out" menu item will support zooming out and making the contents of the application
                smaller.  All visual elements must decrease in size by a factor of 1.189027, down to a minimum
                of 0.5

                This will be matched with a keyboard shortcut (e.g. "Ctrl+-" for Windows).

            Context: Reset Zoom
                The "Reset Zoom" menu item will restore the zoom level of the application to its default 1.0
                of 0.5

                This will be matched with a keyboard shortcut (e.g. "Ctrl+0" for Windows).

            Context: Separator
                There will be a horizontal Separator

            Context: Show Humbug Shell
                The "Show Humbug Shell" menu item will show the system shell.

                This will be matched with a keyboard shortcut (e.g. "Ctrl+Shift+Y" for Windows).

            Context: Separator
                There will be a horizontal Separator

            Context: Show All Columns
                The "Show All Columns" menu item will support showing all active columns, by making them all visible
                and the same width.

                This will be matched with a keyboard shortcut (e.g. "Ctrl+\" for Windows).

            Context: Split Column Left
                The "Split Column Left" menu item will support splitting the current column and moving the current
                tab to a new column to the left of the current one.

                This will only be supported if we have not reached the maximum number of columns.

                This will be matched with a keyboard shortcut (e.g. "Ctrl+Shift+[" for Windows).

            Context: Split Column Right
                The "Split Column Right" menu item will support splitting the current column and moving the current
                tab to a new column to the right of the current one.

                This will only be supported if we have not reached the maximum number of columns.

                This will be matched with a keyboard shortcut (e.g. "Ctrl+Shift+]" for Windows).

            Context: Merge Column Left
                The "Merge Column Left" menu item will support merging the current column with the one to its left as
                long as the current active column is not the left hand column.

                This will be matched with a keyboard shortcut (e.g. "Ctrl+[" for Windows).

            Context: Merge Column Right
                The "Merge Column Right" menu item will support merging the current column with the one to its right as
                long as the current active column is not the right hand column.

                This will be matched with a keyboard shortcut (e.g. "Ctrl+]" for Windows).

            Context: Swap Column Left
                The "Swap Column Left" menu item will support swapping the current column with the one to its left as
                long as the current active column is not the left hand column.

                This will be matched with a keyboard shortcut (e.g. "Ctrl+Alt+[" for Windows).

            Context: Swap Column Right
                The "Swap Column Right" menu item will support ing the current column with the one to its right as
                long as the current active column is not the right hand column.

                This will be matched with a keyboard shortcut (e.g. "Ctrl+Alt+]" for Windows).

            Context: Separator
                There will be a horizontal Separator

            Context: Next Message
                If the current tab is a conversation then this menu item will navigate to the next message in the
                conversation from the one that's currently focused.

                This will be matched with a keyboard shortcut (e.g. "Alt+DownArrow" for Windows).

            Context: Previous Message
                If the current tab is a conversation then this menu item will navigate to the previous message in
                the conversation from the one that's currently focuses.

                This will be matched with a keyboard shortcut (e.g. "Alt+UpArrow" for Windows).

            Context: Separator
                There will be a horizontal Separator

            Context: Toggle Bookmark
                If the current focus is a conversation message then this option will allow the user to bookmark
                the message.  This option will have a checkmark to indicate if the bookmark is being added or removed.

                This will be matched with a keyboard shortcut (e.g. "Ctrl+B" for Windows).

            Context: Next Bookmark
                If the current tab is a conversation and there are bookmarked messages then this menu item will
                navigate to the next bookmark in the conversation.

                This will be matched with a keyboard shortcut (e.g. "Ctrl+Shfit+N" for Windows).

            Context: Previous Bookmark
                If the current tab is a conversation and there are bookmarked messages then this menu item will
                navigate to the previous bookmark in the conversation.

                This will be matched with a keyboard shortcut (e.g. "Ctrl+Shfit+P" for Windows).

        Context: Menu styling
            Menus and menu items must have consistent visual styling:

            - Menu items have 4px border radius for rounded corners
            - Menu items have 8px horizontal padding and 4px vertical padding
            - Menu items highlight with a darker background colour on hover
            - Submenus have a 1px border and 4px border radius

            The specific colours and measurements should scale with the application's zoom level and colour styling.

        Context: Menu state updates
            Menu item states (enabled/disabled) must be updated at least every 50ms to ensure responsive UI
            feedback to user actions.

    Context: File editing
        Editor tabs provide a full-featured text editor with the following capabilities:

        Context: Basic editing
            Standard text editing operations including:

            - Cut/Copy/Paste with standard keyboard shortcuts
            - Undo/Redo functionality
            - Line number display
            - Cursor position display (line:column) in status bar

        Context: Syntax highlighting
            The editor automatically detects and applies syntax highlighting based on file extension
            and content, using the same highlighting rules defined for conversation code blocks.

        Context: Save state handling
            The editor tracks changes and maintains a 'dirty' state:

            - Modified files are marked with an asterisk in the tab name
            - Attempting to close a modified file prompts for save
            - Auto-save backups are maintained periodically if the file has unsaved changes and auto-backup is enabled.

        Context: Status bar
            The editor status bar shows:

            - Current line and column numbers
            - File encoding (UTF-8, etc.)
            - Line ending style (CRLF, LF)
            - File type based on extension or content

        Context: Editor styling
            The editor uses the same color scheme as the conversation interface:

            - Background and text colors match the current theme
            - Selection highlighting matches conversation selection behavior
            - Line numbers and gutters use complementary colors

    Context: User/AI interactions
        Each conversation is an interaction between a user and one or more AI backends.

        Interactions occur in a turn-by-turn fashion, where the user edits a message, until they hit "Ctrl+J".  On
        hitting "Ctrl+J" the application will add the user's message to the conversation transcript and process the
        message.  If the message is for the AI then the application will attempt to send the message to the AI
        and await a response.  If there is an error or exception then the application will report the details to
        the user.

        Context: Message submission
            Messages are submitted using Ctrl+J or the Submit menu item.

            During streaming response:
                - Input area shows "Processing your request (Esc to cancel)"
                - Submit action is disabled
                - Input area is cleared but preserved in history
                - Escape key cancels current streaming response
                - Cancel adds "Request cancelled by user" message
                - Partial response is preserved in transcript

        Context: Streaming handling
            Status line shows token counts after response completes
            Partial responses are shown incrementally as received
            Response streaming can be cancelled by:
                - Escape key
                - Closing the conversation tab
                - Quitting the application

            Auto-scroll follows streamed content unless user scrolls up
            Unsaved partial responses are preserved in transcript on error

    Context: Conversations
        The top part of the conversation window will show a history of everything that has happened, including
        messages, responses from the application, and responses from the AI.  Historical messages cannot be edited

        Below the conversation history is a user input editor.  This input area will increase in size upwards as
        the user adds more content.  This editable region can be arbitrarily large.

        To the user, the historical details and the editable region must feel like they're one window.  Where they
        are required, there is only one vertical scroll bar to cover both the history and editable area.

        Context: Status bar
            The status bar at the bottom of each conversation window shows:

            - Current AI model name (e.g., "Model: gpt-4o-mini")
            - Temperature setting if applicable (e.g., "Temp: 0.7" or "Temp: N/A" for models without temperature)
            - Input and output token counts for the last message

            In parenthesis after the input token count should be the context window size.

        Context: Highlighting operations
            While the editable and non-editable regions must feel like they're one thing, if the user wants to
            interact with them they will behave differently.  For example, highlighting of text cannot span
            between the editable and non-editable regions.

        Context: Message display
            Messages must automatically adjust their display height based on content.  The height adjustment should
            happen smoothly and in real-time as content is added or removed.

        Context: Conversation Settings
            Each conversation can have its own AI model and temperature settings that affect how the AI responds.

            Context: Conversation Settings Dialog
                A "Settings" dialog can be accessed for each conversation via a menu or keyboard shortcut (see
                "Conversation Settings" menu item)

                The dialog shows the current settings for the active conversation tab.

                Context: AI Model
                    The AI model is selected via a dropdown menu.

                    Available models should be configurable at application startup.

                    Any change to the model selection takes effect on the next message sent to the AI.

                    If a model's provider is not available (no API key), that model should be disabled in the
                    conversation settings.

                Context: Temperature
                    The temperature is set via a numeric input field that:

                    - Accepts values between 0.0 and 1.0
                    - Shows one decimal place
                    - Has spinner arrows for adjustment
                    - Default value is 0.7
                    - Changes take effect on the next message sent to the AI

                Context: Model limits display
                    The dialog shows the model's limitations:

                    - Context window size (maximum input tokens)
                    - Maximum output tokens

                    These are displayed below the temperature setting.

                Context: Dialog Controls
                    The dialog has:

                    - "OK" button to save changes and close
                    - "Cancel" button to discard changes and close
                    - "Apply" button to save changes without closing

                    The dialog is modal, preventing interaction with the main window while open.

        Context: Input formatting
            The input box supports Markdown-style code formatting:

            Context: Code blocks
                Text between matching triple backticks (```) is displayed as a code block.
                Code blocks use a monospace font (set as a family fallback: Lucida Console, Menlo, Consolas, Monaco, Courier New, monospace).
                The background colour for code blocks is dark grey (#2d2d2d) and extends across the full width of the input box.
                The code block formatting applies to both the triple backtick lines and all content between them.

            Context: Inline code
                Text between single backticks (`) is displayed as inline code.
                Inline code uses the same monospace font as code blocks.
                Inline code has no background colour.

            Context: Formatting updates
                The formatting is updated in real-time as the user types.
                When inside a code block, each new line is automatically formatted with the monospace font and background.
                The full width background for code blocks is applied immediately, and not just when a newline is entered.

        Context: History display formatting
            The history display supports the same Markdown-style code formatting as the input box:

            Context: Code blocks
                Text between matching triple backticks (```) is displayed as a code block.
                Code blocks use the same monospace font as the input area (Lucida Console, Menlo, Consolas, Monaco, Courier New, monospace).
                The background colour for code blocks is dark grey (#2d2d2d) and extends across the full width.
                The code block formatting applies to both the triple backtick lines and all content between them.

            Context: Inline code
                Text between single backticks (`) is displayed as inline code.
                Inline code uses the same monospace font as code blocks.
                Inline code has no background colour.

            Context: Formatting interaction
                The Markdown formatting is applied in real-time as messages are added or updated.

    Context: Conversation transcript files
        The application will record a transcript of all conversations between the user and the AI, storing each turn
        in a JSON data structure.  The JSON data structure will be written to a transcript file called
        "yyyy-mm-dd-hh-mm-ss-ttt.conv", substituting the conversation start date and time (in UTC) for yyyy,
        mm, dd, hh, mm, ss, ttt (year, numeric month, day-of-month, hours, minutes, seconds, and thousandths of
        seconds respectively).

        Transcript files will be written to a "conversations" directory of the current mindspace directory.  If this
        does not exist then the application must create it.

        On closing a conversation tab the matching file must be fully closed.  If, on closing, the transcript does
        not contain any messages from the AI then the transcript file is automatically deleted.

        Context: Transcript JSON schema
            Use the following JSON schema:

            ```json
            {
                "$schema": "http://json-schema.org/draft-07/schema#",
                "type": "object",
                "properties": {
                    "metadata": {
                        "type": "object",
                        "properties": {
                            "version": { "type": "string" }
                        },
                        "required": ["version"]
                    },
                    "conversation": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": { "type": "string", "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$" },
                                "timestamp": { "type": "string", "format": "date-time" },
                                "type": { "enum": ["user_message", "ai_response", "command", "system_message"] },
                                "content": { "type": "string" },
                                "model": {
                                    "type": "string",
                                    "description": "AI model used (only present for ai_response type)"
                                },
                                "temperature": {
                                    "type": "number",
                                    "minimum": 0,
                                    "maximum": 1,
                                    "description": "Temperature setting used (only present for ai_response type)"
                                },
                                "usage": {
                                    "type": "object",
                                    "properties": {
                                        "prompt_tokens": { "type": "integer" },
                                        "completion_tokens": { "type": "integer" },
                                        "total_tokens": { "type": "integer" }
                                    }
                                },
                                "error": {
                                    "type": "object",
                                    "properties": {
                                        "code": { "type": "string" },
                                        "message": { "type": "string" },
                                        "details": { "type": "object" }
                                    }
                                }
                            },
                            "required": ["id", "timestamp", "type", "content"]
                        }
                    }
                },
                "required": ["metadata", "conversation"]
            }
            ```

        Context: Error recovery
            - Write to temp file first.
            - Atomic rename on successful write.
            - On write failure:
                1. Log error to stderr.
                2. Create backup file.
                3. Continue with new file.

    Context: AI interactions
        The AI backend supports streaming responses that arrive incrementally.  These should be displayed
        as they arrive with content continuing to be added as more arrives.

        AI responses my be either "reasoning" or "response".  Reasoning occurs where a model explicitly
        generates a series of responses to help it construct a response.

        Context: Streaming responses
            The backend provides chunks containing:

            - Content so far
            - Usage statistics (in final chunk only)

            Streaming requires that the display:

            - Shows content immediately as it arrives
            - Updates transcript periodically during streaming
            - Writes final response when stream completes
            - Updates token count after stream completes

            During streaming, if the user hits "Esc" then this will terminate the current streaming response and cancel
            any ongoing request with the AI.  A message "Request cancelled by user" will be added to the history.

        Context: UI handling of streaming
            The display must handle streaming responses by:

            - Tracking where the streamed response starts in history
            - Updating display incrementally as content arrives
            - Removing previous content before adding updates
            - Maintaining newline format and text wrapping

    Context: AI models
        A variety of AI models are available from different AI providers.

        Context: Model providers
            Models are provided by different AI services:

            - Anthropic models: "claude-3-5-haiku-20241022", "claude-3-5-sonnet-20241022",
              "claude-3.7-sonnet-20250219", "claude-4-sonnet-20250514", "claude-4-opus-20250514"
            - Deepseek models: "deepseek-chat", "deepseek-reasoner"
            - Google models: "gemini-1.5-flash", "gemini-1.5-pro", "gemini-2.0-flash",
              "gemini-2.5-flash-preview-05-20", "gemini-2.5-pro-preview-05-06"
            - M6R models: "tessa"
            - Mistral models: "codestral-latest", "devstral-small-2505", "mistral-large-latest", "mistral-small-latest"
            - Ollama models: "gemma3:4b-it-qat", "llama3.2", "qwen3:4b", "phi4"
            - OpenAI models: "gpt-4o-mini", "gpt-4o", "gpt-4.1", "gpt-4.1-mini", "gpt-4.1-nano", "gpt-4.5-preview",
              "o1-mini", "o1", "o3-mini", "o3", "o4-mini"
            - xAI models: "grok-3-beta", "grok-3-fast-beta", "grok-3-mini-beta", "grok-3-mini-fast-beta"

            The AI model is configurable via the settings dialog.

            For each provider, the default model is the first one in each list.

    Context: Temperature settings
        Temperature controls how deterministic or creative the AI's responses are:

        - claude-3-5-haiku-20241022: Supports temperature 0.0-1.0
        - claude-3-5-sonnet-20241022: Supports temperature 0.0-1.0
        - claude-3-7-sonnet-20240219: Supports temperature 0.0-1.0
        - claude-4-sonnet-20240514: Supports temperature 0.0-1.0
        - claude-4-opus-20240514: Supports temperature 0.0-1.0
        - deepseek-chat: Supports temperature 0.0-1.0
        - deepseek-reasoner: Supports temperature 0.0-1.0
        - gemini-1.5-flash: Supports temperature 0.0-1.0
        - gemini-1.5-pro: Supports temperature 0.0-1.0
        - gemini-2.0-flash: Supports temperature 0.0-1.0
        - gemini-2.5-flash-preview-05-20: Supports temperature 0.0-1.0
        - gemini-2.5-pro-preview-05-06: Supports temperature 0.0-1.0
        - tessa: No temperature setting
        - codestral-latest: Supports temperature 0.0-1.0
        - devstral-small-2505: Supports temperature 0.0-1.0
        - mistral-large-latest: Supports temperature 0.0-1.0
        - mistral-small-latest: Supports temperature 0.0-1.0
        - gemma3:4b-it-qat: Supports temperature 0.0-1.0
        - llama3.2: Supports temperature 0.0-1.0
        - qwen3:4b: Supports temperature 0.0-1.0
        - phi4: Supports temperature 0.0-1.0
        - gpt-4o-mini: Supports temperature 0.0-1.0
        - gpt-4o: Supports temperature 0.0-1.0
        - gpt-4.1: Supports temperature 0.0-1.0
        - gpt-4.1-mini: Supports temperature 0.0-1.0
        - gpt-4.1-nano: Supports temperature 0.0-1.0
        - gpt-4.5-preview: Supports temperature 0.0-1.0
        - o1-mini: No temperature setting
        - o1: No temperature setting
        - o3-mini: No temperature setting
        - o3: No temperature setting
        - o4-mini: No temperature setting
        - grok-3-beta: Supports temperature 0.0-1.0
        - grok-3-fast-beta: Supports temperature 0.0-1.0
        - grok-3-mini-beta: Supports temperature 0.0-1.0
        - grok-3-mini-fast-beta: Supports temperature 0.0-1.0

        Where adjustable, the AI temperature for an AI model will be configurable via the settings dialog.

        The temperature control in the Settings dialog is automatically:

        - Enabled and set to 0.7 by default for models that support temperature.
        - Disabled for models that do not support a temperature setting.
        - Preserves previous temperature when switching between models that support temperatures.
        - Reverts to default when switching from models that do not support temperatures to a model that does.

    Context: API key precedence
        API keys are loaded with the following precedence:

        1. Non-empty values from user-settings.json
        2. Environment variables if corresponding file value is empty

        The environment variables checked are:

        - ANTHROPIC_API_KEY for Anthropic models
        - DEEPSEEK_API_KEY for Deepseek models
        - GOOGLE_API_KEY for Google models
        - M6R_API_KEY for M6R models
        - MISTRAL_API_KEY for M6R models
        - OPENAI_API_KEY for OpenAI models
        - XAI_API_KEY for OpenAI models

    Context: Error handling and recovery
        Context: Handling other network errors
            If there are any API errors, such as invalid API keys then the application should report these to the user
            so they are aware these need to be corrected.

    Context: Error handling and recovery
        Context: Error Categories
            The application handles these error types:

            - Network: Connection, timeout, DNS failures
            - API: Authentication, rate limits, invalid requests
            - Application: Input validation, state corruption
            - System: File IO, memory, permissions

        Context: Network timeouts
            If the AI does not respond within 120 seconds of being sent a request, then the application should treat this as
            a timeout and retry up to 3 times.  Each time it retries, it should report that it is retrying.

        Context: Error response strategy
            For each error:

            - Log full details to transcript
            - Display user-friendly message as an application response.  For example:

                429: "Rate limit exceeded.  Retrying in [X] seconds..."
                500: "OpenAI service error.  Retrying in [X] seconds..."
                timeout: "Request timed out.  Retrying in [X] seconds..."

            - Implement appropriate recovery

            Recovery approach:

            - Network errors: Retry with exponential backoff.  Initial delay 2 seconds, doubling each retry.  Max 3 retries.
            - API errors: Handle rate limits, refresh credentials
            - Application errors: Reset to known good state
            - System errors: Graceful degradation

            During retries, preserve the message in the input box.

        Context: Error display format
            Errors appear in message history with:

            - Severity indicator: [ERROR], [WARNING], [INFO]
            - Clear action message if user intervention needed
            - Technical details in expandable section

        Context: Recovery automation
            Context: Rate Limiting
                Track API calls with sliding 60-second window.

                Pause requests when approaching limits.

                If the user's request fails restore the failed message so they can try it again.

            Context: Retry strategy
                Maximum 6 retries for recoverable errors.

                Exponential backoff: 2, 4, 8, 16, 32, 64 seconds.

                Preserve conversation context between retries.

    Context: Security
        Context: Outputs
            Ensure that no sensitive data is either logged or displayed on the screen.

            For example, API keys must never be revealled this way - replace with "[redacted API key]".

        Context: Inputs
            Ensure that all input control characters except for newlines are stripped from any input prior to processing.
